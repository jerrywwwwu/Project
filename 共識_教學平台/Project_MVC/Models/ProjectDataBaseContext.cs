// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace Project_MVC.Models
{
    public partial class ProjectDataBaseContext : DbContext
    {
        public ProjectDataBaseContext()
        {
        }

        public ProjectDataBaseContext(DbContextOptions<ProjectDataBaseContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Book> Books { get; set; }
        public virtual DbSet<ChatRoom> ChatRooms { get; set; }
        public virtual DbSet<ClassCategory> ClassCategories { get; set; }
        public virtual DbSet<ClassChapter> ClassChapters { get; set; }
        public virtual DbSet<ClassContentImage> ClassContentImages { get; set; }
        public virtual DbSet<ClassCourse> ClassCourses { get; set; }
        public virtual DbSet<ClassMessage> ClassMessages { get; set; }
        public virtual DbSet<ClassQa> ClassQas { get; set; }
        public virtual DbSet<ClassScore> ClassScores { get; set; }
        public virtual DbSet<ClassText> ClassTexts { get; set; }
        public virtual DbSet<Comment> Comments { get; set; }
        public virtual DbSet<Messagess> Messagesses { get; set; }
        public virtual DbSet<Post> Posts { get; set; }
        public virtual DbSet<ShoppingAddToCart> ShoppingAddToCarts { get; set; }
        public virtual DbSet<ShoppingOrder> ShoppingOrders { get; set; }
        public virtual DbSet<ShoppingOrderDetail> ShoppingOrderDetails { get; set; }
        public virtual DbSet<Thumb> Thumbs { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<UserTeacher> UserTeachers { get; set; }
        public virtual DbSet<ViewBookUser> ViewBookUsers { get; set; }
        public virtual DbSet<ViewBuiedCoursesName> ViewBuiedCoursesNames { get; set; }
        public virtual DbSet<ViewBuiedTotalPrice> ViewBuiedTotalPrices { get; set; }
        public virtual DbSet<ViewChatRoom> ViewChatRooms { get; set; }
        public virtual DbSet<ViewChatRoomMessage> ViewChatRoomMessages { get; set; }
        public virtual DbSet<ViewClassChapterCount> ViewClassChapterCounts { get; set; }
        public virtual DbSet<ViewClassPageTop> ViewClassPageTops { get; set; }
        public virtual DbSet<ViewClassQabefore> ViewClassQabefores { get; set; }
        public virtual DbSet<ViewClassStartVideo> ViewClassStartVideos { get; set; }
        public virtual DbSet<ViewClassText> ViewClassTexts { get; set; }
        public virtual DbSet<ViewOrderDetailsInIndex> ViewOrderDetailsInIndices { get; set; }
        public virtual DbSet<ViewPersonalIndexBuiedCourse> ViewPersonalIndexBuiedCourses { get; set; }
        public virtual DbSet<ViewPersonalOrderDetail> ViewPersonalOrderDetails { get; set; }
        public virtual DbSet<ViewPost> ViewPosts { get; set; }
        public virtual DbSet<ViewPostBookCount> ViewPostBookCounts { get; set; }
        public virtual DbSet<ViewPostComment> ViewPostComments { get; set; }
        public virtual DbSet<ViewPostCommentCount> ViewPostCommentCounts { get; set; }
        public virtual DbSet<ViewPostThumbCount> ViewPostThumbCounts { get; set; }
        public virtual DbSet<ViewTeacherCourse> ViewTeacherCourses { get; set; }
        public virtual DbSet<ViewUserCourse> ViewUserCourses { get; set; }
        public virtual DbSet<ViewUserTeacher> ViewUserTeachers { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Book>(entity =>
            {
                entity.HasIndex(e => new { e.UserId, e.PostId }, "UC_Books_UserPost")
                    .IsUnique();

                entity.Property(e => e.BookId).HasColumnName("BookID");

                entity.Property(e => e.BookTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.PostId).HasColumnName("PostID");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.HasOne(d => d.Post)
                    .WithMany(p => p.Books)
                    .HasForeignKey(d => d.PostId)
                    .HasConstraintName("FK__Books__PostID__6754599E");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Books)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK__Books__UserID__68487DD7");
            });

            modelBuilder.Entity<ChatRoom>(entity =>
            {
                entity.Property(e => e.ChatRoomId).HasColumnName("ChatRoomID");

                entity.Property(e => e.ChatRoomTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.PostId).HasColumnName("PostID");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.HasOne(d => d.Post)
                    .WithMany(p => p.ChatRooms)
                    .HasForeignKey(d => d.PostId)
                    .HasConstraintName("FK__ChatRooms__PostI__693CA210");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.ChatRooms)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK__ChatRooms__UserI__6A30C649");
            });

            modelBuilder.Entity<ClassCategory>(entity =>
            {
                entity.HasKey(e => e.CourseCategoryId)
                    .HasName("PK__ClassCat__4D67EBD628D6D83B");

                entity.ToTable("ClassCategory");

                entity.Property(e => e.CourseCategoryId).HasColumnName("CourseCategoryID");

                entity.Property(e => e.CourseCategoryName).HasMaxLength(15);
            });

            modelBuilder.Entity<ClassChapter>(entity =>
            {
                entity.HasKey(e => e.ChapterId)
                    .HasName("PK__ClassCha__0893A34A0CDA0729");

                entity.ToTable("ClassChapter");

                entity.Property(e => e.ChapterId).HasColumnName("ChapterID");

                entity.Property(e => e.ChapterTitle).HasMaxLength(50);

                entity.Property(e => e.CourseId).HasColumnName("CourseID");

                entity.Property(e => e.CourseVideo).HasMaxLength(200);

                entity.HasOne(d => d.Course)
                    .WithMany(p => p.ClassChapters)
                    .HasForeignKey(d => d.CourseId)
                    .HasConstraintName("FK__ClassChap__Cours__6B24EA82");
            });

            modelBuilder.Entity<ClassContentImage>(entity =>
            {
                entity.HasKey(e => e.ContentImageId)
                    .HasName("PK__ClassCon__C19A5948482C1A20");

                entity.ToTable("ClassContentImage");

                entity.Property(e => e.ContentImageId).HasColumnName("ContentImageID");

                entity.Property(e => e.ContentImage).HasMaxLength(200);

                entity.Property(e => e.CourseId).HasColumnName("CourseID");

                entity.HasOne(d => d.Course)
                    .WithMany(p => p.ClassContentImages)
                    .HasForeignKey(d => d.CourseId)
                    .HasConstraintName("FK__ClassCont__Cours__6C190EBB");
            });

            modelBuilder.Entity<ClassCourse>(entity =>
            {
                entity.HasKey(e => e.CourseId)
                    .HasName("PK__ClassCou__C92D718763D2C74D");

                entity.Property(e => e.CourseId).HasColumnName("CourseID");

                entity.Property(e => e.CourseCategoryId).HasColumnName("CourseCategoryID");

                entity.Property(e => e.CourseImageUrl).HasMaxLength(200);

                entity.Property(e => e.CourseIntro).HasMaxLength(300);

                entity.Property(e => e.CourseIntroVideo).HasMaxLength(200);

                entity.Property(e => e.CourseName).HasMaxLength(50);

                entity.Property(e => e.CoursePrice).HasColumnType("money");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.HasOne(d => d.CourseCategory)
                    .WithMany(p => p.ClassCourses)
                    .HasForeignKey(d => d.CourseCategoryId)
                    .HasConstraintName("FK__ClassCour__Cours__6D0D32F4");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.ClassCourses)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK__ClassCour__UserI__6E01572D");
            });

            modelBuilder.Entity<ClassMessage>(entity =>
            {
                entity.HasKey(e => e.CourseMessageId)
                    .HasName("PK__ClassMes__C09A44DF8C282175");

                entity.ToTable("ClassMessage");

                entity.Property(e => e.CourseMessageId).HasColumnName("CourseMessageID");

                entity.Property(e => e.CourseMessage).HasMaxLength(500);

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.ClassMessages)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK__ClassMess__UserI__6EF57B66");
            });

            modelBuilder.Entity<ClassQa>(entity =>
            {
                entity.HasKey(e => e.CourseQaid)
                    .HasName("PK__ClassQA__E3F3B84B82B321EE");

                entity.ToTable("ClassQA");

                entity.Property(e => e.CourseQaid).HasColumnName("CourseQAID");

                entity.Property(e => e.CourseId).HasColumnName("CourseID");

                entity.Property(e => e.CourseQamessage).HasColumnName("CourseQAMessage");

                entity.Property(e => e.Qatime)
                    .HasColumnType("datetime")
                    .HasColumnName("QATime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.HasOne(d => d.Course)
                    .WithMany(p => p.ClassQas)
                    .HasForeignKey(d => d.CourseId)
                    .HasConstraintName("FK__ClassQA__CourseI__6FE99F9F");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.ClassQas)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK__ClassQA__UserID__70DDC3D8");
            });

            modelBuilder.Entity<ClassScore>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.CourseId })
                    .HasName("PK__ClassSco__7B1A1BB42A2F07E2");

                entity.ToTable("ClassScore");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.CourseId).HasColumnName("CourseID");

                entity.Property(e => e.CourseScoreMessage).HasMaxLength(200);

                entity.HasOne(d => d.Course)
                    .WithMany(p => p.ClassScores)
                    .HasForeignKey(d => d.CourseId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__ClassScor__Cours__04E4BC85");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.ClassScores)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__ClassScor__UserI__03F0984C");
            });

            modelBuilder.Entity<ClassText>(entity =>
            {
                entity.HasKey(e => e.CourseTextId)
                    .HasName("PK__ClassTex__000967C31DB4DA50");

                entity.ToTable("ClassText");

                entity.Property(e => e.CourseTextId).HasColumnName("CourseTextID");

                entity.Property(e => e.CourseId).HasColumnName("CourseID");

                entity.Property(e => e.TextTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.HasOne(d => d.Course)
                    .WithMany(p => p.ClassTexts)
                    .HasForeignKey(d => d.CourseId)
                    .HasConstraintName("FK__ClassText__Cours__73BA3083");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.ClassTexts)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK__ClassText__UserI__74AE54BC");
            });

            modelBuilder.Entity<Comment>(entity =>
            {
                entity.Property(e => e.CommentId).HasColumnName("CommentID");

                entity.Property(e => e.CommentContent)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CommentTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.PostId).HasColumnName("PostID");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.HasOne(d => d.Post)
                    .WithMany(p => p.Comments)
                    .HasForeignKey(d => d.PostId)
                    .HasConstraintName("FK__Comments__PostID__75A278F5");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Comments)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK__Comments__UserID__76969D2E");
            });

            modelBuilder.Entity<Messagess>(entity =>
            {
                entity.HasKey(e => e.MessageId)
                    .HasName("PK__Messages__C87C037C6E5B288A");

                entity.ToTable("Messagess");

                entity.Property(e => e.MessageId).HasColumnName("MessageID");

                entity.Property(e => e.ChatRoomId).HasColumnName("ChatRoomID");

                entity.Property(e => e.MessageContent).HasMaxLength(255);

                entity.Property(e => e.MessageTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.HasOne(d => d.ChatRoom)
                    .WithMany(p => p.Messagesses)
                    .HasForeignKey(d => d.ChatRoomId)
                    .HasConstraintName("FK__Messagess__ChatR__778AC167");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Messagesses)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK__Messagess__UserI__787EE5A0");
            });

            modelBuilder.Entity<Post>(entity =>
            {
                entity.Property(e => e.PostId).HasColumnName("PostID");

                entity.Property(e => e.HiddenPost)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PostCategory)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.PostContent).IsRequired();

                entity.Property(e => e.PostPublishTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.PostTag1).HasMaxLength(50);

                entity.Property(e => e.PostTag2).HasMaxLength(50);

                entity.Property(e => e.PostTag3).HasMaxLength(50);

                entity.Property(e => e.PostTitle)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.PostrImgUrl).HasMaxLength(50);

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Posts)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK__Posts__UserID__797309D9");
            });

            modelBuilder.Entity<ShoppingAddToCart>(entity =>
            {
                entity.HasKey(e => e.ShoppingCartId)
                    .HasName("PK__Shopping__7A789A84C09A5176");

                entity.HasIndex(e => new { e.UserId, e.CourseId }, "UQ_ShoppingAddToCarts_UserCourse")
                    .IsUnique();

                entity.Property(e => e.ShoppingCartId).HasColumnName("ShoppingCartID");

                entity.Property(e => e.CourseId).HasColumnName("CourseID");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.HasOne(d => d.Course)
                    .WithMany(p => p.ShoppingAddToCarts)
                    .HasForeignKey(d => d.CourseId)
                    .HasConstraintName("FK_ShoppingAddToCarts_ClassCourses");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.ShoppingAddToCarts)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_ShoppingAddToCarts_Users");
            });

            modelBuilder.Entity<ShoppingOrder>(entity =>
            {
                entity.HasKey(e => e.OrderId)
                    .HasName("PK__Shopping__C3905BAF2027735E");

                entity.Property(e => e.OrderId).HasColumnName("OrderID");

                entity.Property(e => e.OrderDate)
                    .HasColumnType("date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.ShoppingOrders)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__ShoppingO__UserI__7E37BEF6");
            });

            modelBuilder.Entity<ShoppingOrderDetail>(entity =>
            {
                entity.HasKey(e => e.OrderDetailId)
                    .HasName("PK__Shopping__D3B9D30C6BB579CF");

                entity.Property(e => e.OrderDetailId).HasColumnName("OrderDetailID");

                entity.Property(e => e.CourseId).HasColumnName("CourseID");

                entity.Property(e => e.OrderId).HasColumnName("OrderID");

                entity.HasOne(d => d.Course)
                    .WithMany(p => p.ShoppingOrderDetails)
                    .HasForeignKey(d => d.CourseId)
                    .HasConstraintName("FK__ShoppingO__Cours__7C4F7684");

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.ShoppingOrderDetails)
                    .HasForeignKey(d => d.OrderId)
                    .HasConstraintName("FK__ShoppingO__Order__7D439ABD");
            });

            modelBuilder.Entity<Thumb>(entity =>
            {
                entity.HasIndex(e => new { e.UserId, e.PostId }, "UC_Thumbs_UserPost")
                    .IsUnique();

                entity.Property(e => e.ThumbId).HasColumnName("ThumbID");

                entity.Property(e => e.PostId).HasColumnName("PostID");

                entity.Property(e => e.ThumbTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.HasOne(d => d.Post)
                    .WithMany(p => p.Thumbs)
                    .HasForeignKey(d => d.PostId)
                    .HasConstraintName("FK__Thumbs__PostID__7F2BE32F");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Thumbs)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK__Thumbs__UserID__00200768");
            });

            modelBuilder.Entity<User>(entity =>
            {
                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.UserCreateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.UserEmail)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.UserGender)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.UserImageUrl).HasMaxLength(50);

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.UserPassword)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<UserTeacher>(entity =>
            {
                entity.HasKey(e => e.TeacherId)
                    .HasName("PK__UserTeac__EDF259446CF7AC58");

                entity.ToTable("UserTeacher");

                entity.Property(e => e.TeacherId).HasColumnName("TeacherID");

                entity.Property(e => e.UserBgimage)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UserBGImage");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.UserTeachers)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__UserTeach__UserI__01142BA1");
            });

            modelBuilder.Entity<ViewBookUser>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewBookUser");

                entity.Property(e => e.BookId).HasColumnName("BookID");

                entity.Property(e => e.BookTime).HasColumnType("datetime");

                entity.Property(e => e.HiddenPost)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PostCategory).HasMaxLength(50);

                entity.Property(e => e.PostId).HasColumnName("PostID");

                entity.Property(e => e.PostIdbyBook).HasColumnName("PostIDbyBook");

                entity.Property(e => e.PostPublishTime).HasColumnType("datetime");

                entity.Property(e => e.PostTag1).HasMaxLength(50);

                entity.Property(e => e.PostTag2).HasMaxLength(50);

                entity.Property(e => e.PostTag3).HasMaxLength(50);

                entity.Property(e => e.PostTitle).HasMaxLength(100);

                entity.Property(e => e.PostrImgUrl).HasMaxLength(50);

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.UserImageUrl).HasMaxLength(50);

                entity.Property(e => e.UserName).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewBuiedCoursesName>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewBuiedCoursesName");

                entity.Property(e => e.CourseId).HasColumnName("CourseID");

                entity.Property(e => e.CourseName).HasMaxLength(50);

                entity.Property(e => e.CoursePrice).HasColumnType("money");

                entity.Property(e => e.ShoppingCartId).HasColumnName("ShoppingCartID");

                entity.Property(e => e.UserEmail).HasMaxLength(100);

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.UserName).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewBuiedTotalPrice>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewBuiedTotalPrice");

                entity.Property(e => e.UserId).HasColumnName("UserID");
            });

            modelBuilder.Entity<ViewChatRoom>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewChatRoom");

                entity.Property(e => e.ChatRoomId).HasColumnName("ChatRoomID");

                entity.Property(e => e.ChatRoomTime).HasColumnType("datetime");

                entity.Property(e => e.PostId).HasColumnName("PostID");

                entity.Property(e => e.PostTitle).HasMaxLength(100);

                entity.Property(e => e.PosterId).HasColumnName("PosterID");

                entity.Property(e => e.PosterName).HasMaxLength(50);

                entity.Property(e => e.Posterimg).HasMaxLength(50);

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.UserImageUrl).HasMaxLength(50);

                entity.Property(e => e.UserName).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewChatRoomMessage>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewChatRoomMessage");

                entity.Property(e => e.ChatRoomId).HasColumnName("ChatRoomID");

                entity.Property(e => e.ChatRoomsPostId).HasColumnName("ChatRoomsPostID");

                entity.Property(e => e.MessageContent).HasMaxLength(255);

                entity.Property(e => e.MessageId).HasColumnName("MessageID");

                entity.Property(e => e.MessageTime).HasColumnType("datetime");

                entity.Property(e => e.PostTitle).HasMaxLength(100);

                entity.Property(e => e.PosterId).HasColumnName("PosterID");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.UserImageUrl).HasMaxLength(50);

                entity.Property(e => e.UserName).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewClassChapterCount>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewClassChapterCount");

                entity.Property(e => e.CourseId).HasColumnName("CourseID");
            });

            modelBuilder.Entity<ViewClassPageTop>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewClassPageTop");

                entity.Property(e => e.CourseCategoryId).HasColumnName("CourseCategoryID");

                entity.Property(e => e.CourseCategoryName).HasMaxLength(15);

                entity.Property(e => e.CourseId).HasColumnName("CourseID");

                entity.Property(e => e.CourseIntro).HasMaxLength(300);

                entity.Property(e => e.CourseIntroVideo).HasMaxLength(200);

                entity.Property(e => e.CourseName).HasMaxLength(50);

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.UserName).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewClassQabefore>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewClassQABefore");

                entity.Property(e => e.CourseId).HasColumnName("CourseID");

                entity.Property(e => e.CourseQaid).HasColumnName("CourseQAID");

                entity.Property(e => e.CourseQamessage).HasColumnName("CourseQAMessage");

                entity.Property(e => e.Qatime)
                    .HasColumnType("datetime")
                    .HasColumnName("QATime");

                entity.Property(e => e.Qauser)
                    .HasMaxLength(50)
                    .HasColumnName("QAUser");

                entity.Property(e => e.QauserId).HasColumnName("QAUserID");

                entity.Property(e => e.UserImageUrl).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewClassStartVideo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewClassStartVideo");

                entity.Property(e => e.ChapterId).HasColumnName("ChapterID");

                entity.Property(e => e.ChapterTitle).HasMaxLength(50);

                entity.Property(e => e.CourseCategoryId).HasColumnName("CourseCategoryID");

                entity.Property(e => e.CourseId).HasColumnName("CourseID");

                entity.Property(e => e.CourseImageUrl).HasMaxLength(200);

                entity.Property(e => e.CourseIntro).HasMaxLength(300);

                entity.Property(e => e.CourseIntroVideo).HasMaxLength(200);

                entity.Property(e => e.CourseName).HasMaxLength(50);

                entity.Property(e => e.CourseVideo).HasMaxLength(200);
            });

            modelBuilder.Entity<ViewClassText>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewClassText");

                entity.Property(e => e.CourseId).HasColumnName("CourseID");

                entity.Property(e => e.CourseTextId).HasColumnName("CourseTextID");

                entity.Property(e => e.TextTime).HasColumnType("datetime");

                entity.Property(e => e.TextUser).HasMaxLength(50);

                entity.Property(e => e.TextUserId).HasColumnName("TextUserID");

                entity.Property(e => e.UserImageUrl).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewOrderDetailsInIndex>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewOrderDetailsInIndex");

                entity.Property(e => e.CourseId).HasColumnName("CourseID");

                entity.Property(e => e.CourseImageUrl).HasMaxLength(200);

                entity.Property(e => e.CourseName).HasMaxLength(50);

                entity.Property(e => e.OrderDetailId).HasColumnName("OrderDetailID");

                entity.Property(e => e.OrderId).HasColumnName("OrderID");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.UserName).HasMaxLength(50);

                entity.Property(e => e.UserTeacherName).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewPersonalIndexBuiedCourse>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewPersonalIndexBuiedCourses");

                entity.Property(e => e.CourseId).HasColumnName("CourseID");

                entity.Property(e => e.CourseImageUrl).HasMaxLength(200);

                entity.Property(e => e.CourseName).HasMaxLength(50);

                entity.Property(e => e.ShoppingCartId).HasColumnName("ShoppingCartID");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.UserName).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewPersonalOrderDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewPersonalOrderDetails");

                entity.Property(e => e.CourseId).HasColumnName("CourseID");

                entity.Property(e => e.CourseImageUrl).HasMaxLength(200);

                entity.Property(e => e.CourseName).HasMaxLength(50);

                entity.Property(e => e.CoursePrice).HasColumnType("money");

                entity.Property(e => e.ShoppingCartId).HasColumnName("ShoppingCartID");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.UserName).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewPost>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewPost");

                entity.Property(e => e.HiddenPost)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PostCategory)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.PostContent).IsRequired();

                entity.Property(e => e.PostId).HasColumnName("PostID");

                entity.Property(e => e.PostPublishTime).HasColumnType("datetime");

                entity.Property(e => e.PostTag1).HasMaxLength(50);

                entity.Property(e => e.PostTag2).HasMaxLength(50);

                entity.Property(e => e.PostTag3).HasMaxLength(50);

                entity.Property(e => e.PostTitle)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.PostrImgUrl).HasMaxLength(50);

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.UserImageUrl).HasMaxLength(50);

                entity.Property(e => e.UserName).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewPostBookCount>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewPostBookCount");

                entity.Property(e => e.PostId).HasColumnName("PostID");
            });

            modelBuilder.Entity<ViewPostComment>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewPostComment");

                entity.Property(e => e.CommentContent)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CommentId).HasColumnName("CommentID");

                entity.Property(e => e.CommentTime).HasColumnType("datetime");

                entity.Property(e => e.CommentUser).HasMaxLength(50);

                entity.Property(e => e.CommentUserId).HasColumnName("CommentUserID");

                entity.Property(e => e.PostId).HasColumnName("PostID");

                entity.Property(e => e.UserImageUrl).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewPostCommentCount>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewPostCommentCount");

                entity.Property(e => e.PostId).HasColumnName("PostID");
            });

            modelBuilder.Entity<ViewPostThumbCount>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewPostThumbCount");

                entity.Property(e => e.PostId).HasColumnName("PostID");
            });

            modelBuilder.Entity<ViewTeacherCourse>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewTeacherCourse");

                entity.Property(e => e.CourseId).HasColumnName("CourseID");

                entity.Property(e => e.CourseImageUrl).HasMaxLength(200);

                entity.Property(e => e.CourseIntro).HasMaxLength(300);

                entity.Property(e => e.CourseName).HasMaxLength(50);

                entity.Property(e => e.CoursePrice).HasColumnType("money");

                entity.Property(e => e.TeacherImage).HasMaxLength(50);

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.UserTeacherName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewUserCourse>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewUserCourse");

                entity.Property(e => e.CourseCategoryId).HasColumnName("CourseCategoryID");

                entity.Property(e => e.CourseCategoryName).HasMaxLength(15);

                entity.Property(e => e.CourseId).HasColumnName("CourseID");

                entity.Property(e => e.CourseIntro).HasMaxLength(300);

                entity.Property(e => e.CourseName).HasMaxLength(50);

                entity.Property(e => e.CoursePrice).HasColumnType("money");

                entity.Property(e => e.UserCourseImageUrl).HasMaxLength(200);

                entity.Property(e => e.UserCourseName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.UserId).HasColumnName("UserID");
            });

            modelBuilder.Entity<ViewUserTeacher>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewUserTeacher");

                entity.Property(e => e.TeacherImage).HasMaxLength(50);

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.UserTeacherName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}